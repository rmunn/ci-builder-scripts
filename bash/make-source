#!/bin/bash -e
# Create source package
# set supported distros and architectures

PROGRAM_NAME="$(basename "$0")"
PROGRAM_DIR="$(dirname "$0")"

. ${PROGRAM_DIR}/common.sh
init "$@"

log "Preparing"
mkdir -p "$repo_base_dir"
mkdir -p "$pbuilder_path"

# change package name
if [ -n "$append_to_package" ]; then
	NEWPACKAGENAME="--package=${source_package_name}${append_to_package}"
	source_package_name=${source_package_name}${append_to_package}
	${PROGRAM_DIR}/change-package-name.pl $append_to_package
	sed -e "s/^PACKAGENAME *=.*/&${append_to_package}/" -e "s/^APPEND *=.*/&${append_to_package}/" -i debian/rules
fi

# Clean out old packages
rm -f "$repo_base_dir"/${source_package_name}_*.{dsc,build,changes,tar.*,log}

# Add entry to debian/changelog
if [ "$VCS" = "hg" ]; then
	hash_of_current_commit=$(cd ${main_repo_dir:-.} && hg id -i 2>/dev/null |cut -c -12)
else
	hash_of_current_commit=$(cd ${main_repo_dir:-.} && git rev-parse --short HEAD)
fi

timestamp=$(date -u +"%Y%m%dT%H%M%SZ")
latest_version_in_debian_changelog=$(dpkg-parsechangelog --show-field=Version)
if [ -z "$package_version" ]; then
	base_version=${code_version:-$latest_version_in_debian_changelog}
else
	# Merge version from changelog with passed in version. Any zeros in package_version
	# will be replaced by corresponding number from changelog version.
	base_version_parts=(${latest_version_in_debian_changelog//./ })
	result_version=""
	i=0
	for part in $(echo $package_version | tr "." "\n"); do
		if [ ${#result_version} -gt 0 ]; then
			result_version="${result_version}."
		fi
		if [ "$part" = "0" ]; then
			result_version="${result_version}${base_version_parts[$i]}"
		else
			result_version="${result_version}$part"
		fi
		i=$[i+1]
	done
	base_version=$result_version
fi
nightlydelimeter=${nightlydelimeter:-"."}
nightlyversion="${base_version}${nightlydelimeter}nightly${timestamp}.${hash_of_current_commit}${package_version_extension}"

distribution_of_last_change=$(dpkg-parsechangelog --show-field=Distribution)

if [[ "$DISTS_TO_PROCESS" != *$distribution_of_last_change* ]]; then
	distribution_of_last_change=$(echo "$DISTRIBUTIONS_TO_PACKAGE" | cut -d' ' -f1)
fi
changelog_message="Built from commit $hash_of_current_commit"
if [ -n "$most_recent_tag" ]; then
	changelog_message="See git log $most_recent_tag..$hash_of_current_commit"
fi
if [ -z "$preserve_changelog_arg" ]; then
	log "Using package version: $nightlyversion-1 for $distribution_of_last_change"
	# Don't change distribution here - we don't want to create a new changelog entry!
	dch $NEWPACKAGENAME --newversion "$nightlyversion-1" --force-bad-version "$changelog_message"
	native_version=$nightlyversion
elif [ -n "${package_version}" ]; then
	log "Using package version: $base_version-1 for $distribution_of_last_change"
	# Don't change distribution here - we don't want to create a new changelog entry!
	dch $NEWPACKAGENAME --newversion "$base_version-1" --force-bad-version "$changelog_message"
	native_version=$base_version
else
	log "Using package version: $latest_version_in_debian_changelog"
	native_version=$latest_version_in_debian_changelog
fi

if [ -x "build/buildupdate.mono.sh" ]; then
	log "Getting artifacts from TeamCity:"
	./build/buildupdate.mono.sh
fi

log "Building source package:"
[ -z "$build_in_place" ] && cd $repo_base_dir/${source_package_dir:-$source_package_name}
if [ -n "$debkeyid" ]; then
	signing_opt="-k$debkeyid"
	echo "Setting signing opts to ^$signing_opt^"
elif [ -n "$DEBSIGNKEY" ]; then
	signing_opt="-k$DEBSIGNKEY"
	echo "Setting signing opts to ^$signing_opt^"
fi

if [ "$(cat debian/source/format)" == "3.0 (native)" ]; then
	log "Native package. Building original source package."
	if [ "$VCS" = "hg" ]; then
		dpkg-source --tar-ignore=debian -b .
		mv ../${source_package_name}_${native_version}{,.orig}.tar.xz
	else
		[ -n "$build_in_place" ] && trap "cd $repo_base_dir && git checkout debian/source/format .gitattributes debian/changelog" EXIT
		echo "debian/ export-ignore" >> .gitattributes
		[ -f debian/source/options ] && cat debian/source/options | while read line; do
			echo "${line#tar-ignore=} export-ignore" >> .gitattributes
		done
		echo "git archive --format=tar --worktree-attributes HEAD | xz -c > ../${source_package_name}_${native_version}.orig.tar.xz"
		git archive --format=tar --worktree-attributes HEAD | xz -c > ../${source_package_name}_${native_version}.orig.tar.xz
	fi
	echo "3.0 (quilt)" > debian/source/format
	debuild_opts="--source-option=--include-binaries"
fi

debuild -S -sa -Zxz ${signing_opt} ${debuild_opts}

log "Source package files exist with the following sha256sums:"
if [ -z "$build_in_place" ]; then
	cd "$repo_base_dir"
else
	cd ..
fi
sha256sum ${source_package_name}_*.{dsc,build,changes,tar.?z}


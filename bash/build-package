#!/bin/bash
# Create binary package
# set supported distros and architectures
set -e

PROGRAM_NAME="$(basename "$0")"

. $(dirname "$0")/common.sh
init "$@"
[ -f $(dirname "$0")/build-package.config ] && . $(dirname "$0")/build-package.config

ARTIFACTSDIR=${WORKSPACE:-$repo_base_dir}/results

# Don't try to process 32-bit package products if they are all architectureless.
grep "^Architecture: " "$debian_path"/control|grep -q -v "Architecture: all$" || {
	if [[ $ARCHES_TO_PACKAGE == *"amd64"* ]]; then
		log "All binary packages are listed as 'all' architecture. Resetting --arches to 'amd64'."
		ARCHES_TO_PACKAGE="amd64"
	else
		log "All binary packages are listed as 'all' architecture. Not building i386."
		exit 0
	fi
}

log "Removing old packages"

for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		RESULT="$RESULTBASE/$dist-$arch/result"
		rm $RESULT/${source_package_name}_*.{changes,deb,dsc,status,tar.*} 2>/dev/null || true
		rm ${ARTIFACTSDIR}/* 2>/dev/null || true
	done
done

log "Preparing for building binary package(s) for ${DISTRIBUTIONS_TO_PACKAGE}"

mkdir -p "$RESULTBASE"

[ -f "${RESULTBASE}/sil-testing.gpg" ] || wget -q -O "${RESULTBASE}/sil-testing.gpg" http://linux.lsdev.sil.org/downloads/sil-testing.gpg
[ -f "${RESULTBASE}/sil.gpg" ] || wget -q -O "${RESULTBASE}/sil.gpg" http://packages.sil.org/sil.gpg

# Make sure base.tgz is in place for any distributions being used.
for distribution in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		if [ ! -e "$SCHROOTDIR"/$distribution-$arch ]; then
			log "$SCHROOTDIR/$distribution-$arch does not exist. Creating a new chroot for $distribution-$arch"
			DISTRIBUTIONS="$distribution" ARCHES="$arch" $(dirname "$0")/setup.sh
		fi
	done
done

log "Building binary package(s)"

cd "$repo_base_dir"
packagedsc=$(ls ${source_package_name}_*.dsc)
DISTRIBUTIONS="$DISTRIBUTIONS_TO_PACKAGE" ARCHES="$ARCHES_TO_PACKAGE" $(dirname "$0")/build-multi.sh "$packagedsc"

log "Signing package(s)"

cd "$RESULTBASE"
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		RESULT="$RESULTBASE/$dist-$arch/result"
		mkdir -p $RESULT
		cd $RESULT
		if [ $(ls ${source_package_name}_*.changes 2> /dev/null | wc -l) -ge 1 ]; then
			sed -i '10d' ${source_package_name}_*.changes
			# .changes files can have their Distribution set to UNRELEASED sometimes. Fix it.
			perl -pi -e "s/UNRELEASED/$dist/" ${source_package_name}_*.changes
			[ -z "$debkeyid" ] && stderr "Warning: debkeyid not set."
			debsign -k$debkeyid --no-re-sign ${source_package_name}_*.changes
		fi
	done
done

log "Package files exist with the following sha256sums:"
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		cd $RESULTBASE/$dist-$arch/result
		mkdir -p "$ARTIFACTSDIR"
		if grep -q '.buildinfo$' ${source_package_name}_*+${dist}1_${arch}.changes ; then
			# Starting with Bionic the package contains a .buildinfo file that's required to
			# upload the package
			DCMD_ARGS="--deb --changes --buildinfo"
			DCMD_NOARGS="--no-deb --no-changes --no-orig --no-debtar --no-dsc --no-buildinfo"
		else
			DCMD_ARGS="--deb --changes"
			DCMD_NOARGS="--no-deb --no-changes --no-orig --no-debtar --no-dsc"
		fi
		TRACE dcmd $DCMD_ARGS sha256sum ${source_package_name}_*+${dist}1_${arch}.changes || true
		dcmd $DCMD_ARGS cp ${source_package_name}_*+${dist}1_${arch}.changes $ARTIFACTSDIR/
		if grep -q '.ddeb$' ${source_package_name}_*+${dist}1_${arch}.changes ; then
			dcmd $DCMD_NOARGS sha256sum ${source_package_name}_*+${dist}1_${arch}.changes || true
			dcmd $DCMD_NOARGS cp ${source_package_name}_*+${dist}1_${arch}.changes $ARTIFACTSDIR/
		fi
		if [ $( ls ${source_package_name}_*-1+*.dsc 2> /dev/null | wc -l) -ge 1 ]; then
			dcmd --dsc --orig --debtar sha256sum ${source_package_name}_*-1+*.dsc || true
			dcmd --dsc --orig --debtar cp ${source_package_name}_*-1+*.dsc $ARTIFACTSDIR/
		fi
	done
done

log "Results:"
any_failures=false
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		RESULT="$RESULTBASE/$dist-$arch/result/${source_package_name}_*.status"
		echo -n "$(eval echo $(basename $RESULT)): "
		cat $RESULT
		grep -q '^0$' $RESULT || any_failures=true
	done
done

if [ "$any_failures" = "true" ]; then
	stderr "Error: One or more failures detected. Not uploading any packages."
	exit 100
fi

if [ -n "$no_upload" ]; then
	# don't automatically upload
	exit 0
fi

log "Upload packages"
cd "$RESULTBASE"
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		cd $RESULTBASE/$dist-$arch/result
		if [ $(ls ${source_package_name}_*.changes 2> /dev/null | wc -l) -ge 1 ]; then
			log "Uploading to llso:ubuntu/$dist$SUITE_NAME $arch"
			dput $dput_simulate -U llso:ubuntu/$dist$SUITE_NAME ${source_package_name}_*.changes
		fi
	done
done

exit 0
